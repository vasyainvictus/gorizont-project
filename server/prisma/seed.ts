// prisma/seed.ts
import { PrismaClient, UserStatus } from '@prisma/client';
import { subYears } from 'date-fns';

const prisma = new PrismaClient();

// --- –î–ê–ù–ù–´–ï –î–õ–Ø –ù–ê–ü–û–õ–ù–ï–ù–ò–Ø ---

// –ú–∞—Å—Å–∏–≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
const interestsData = [
  { name: '–°–ø–æ—Ä—Ç' }, { name: '–í—ã—Å—Ç–∞–≤–∫–∏' }, { name: '–ù–∞—Å—Ç–æ–ª–∫–∏' },
  { name: '–ö–∏–Ω–æ' }, { name: '–ö–Ω–∏–≥–∏' }, { name: '–ô–æ–≥–∞' },
  { name: '–ö—É–ª–∏–Ω–∞—Ä–∏—è' }, { name: '–¢–∞–Ω—Ü—ã' }, { name: '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' },
  { name: '–í–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–æ' },
];

// –í—ã–º—ã—à–ª–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
const names = [
  '–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–î–∞—Ä—å—è', '–ê–Ω–∞—Å—Ç–∞—Å–∏—è',
  '–ê–ª—ë–Ω–∞', '–í–∏–∫—Ç–æ—Ä–∏—è', '–ö—Å–µ–Ω–∏—è', '–ü–æ–ª–∏–Ω–∞', '–°–æ—Ñ–∏—è',
];

// –ì–æ—Ä–æ–¥–∞
const cities = [
  '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥',
  '–ö–∞–∑–∞–Ω—å', '–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', '–ß–µ–ª—è–±–∏–Ω—Å–∫'
];

// –û–ø–∏—Å–∞–Ω–∏—è
const descriptions = [
  '–õ—é–±–ª—é –π–æ–≥—É –∏ –∑–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ', '–ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ—Ö–æ–¥–æ–≤ –≤ –∫–∏–Ω–æ',
  '–£–≤–ª–µ–∫–∞—é—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º–∏', '–ò—â—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏—Ü –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä',
  '–õ—é–±–ª—é –≤—ã—Å—Ç–∞–≤–∫–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ', '–ò—â—É –ø–æ–¥—Ä—É–≥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
  '–£–≤–ª–µ–∫–∞—é—Å—å –∫—É–ª–∏–Ω–∞—Ä–∏–µ–π –∏ –≤–∏–Ω–æ–¥–µ–ª–∏–µ–º', '–ò—â—É –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –≤–æ–ª–æ–Ω—Ç—ë—Ä—Å—Ç–≤–∞'
];

// --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

async function main() {
  // --- –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–†–ï–°–û–í ---
  console.log('üå± –≠—Ç–∞–ø 1: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã Interest...');
  for (const interestData of interestsData) {
    await prisma.interest.upsert({
      where: { name: interestData.name },
      update: {},
      create: { name: interestData.name },
    });
  }
  console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ Interest —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞.');

  // --- –≠–¢–ê–ü 2: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –ü–†–û–§–ò–õ–ï–ô ---
  console.log('\nüå± –≠—Ç–∞–ø 2: –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏...');
  const allInterests = await prisma.interest.findMany();

  for (let i = 0; i < 12; i++) {
    const name = names[Math.floor(Math.random() * names.length)];
    const city = cities[Math.floor(Math.random() * cities.length)];
    const about = descriptions[Math.floor(Math.random() * descriptions.length)];
    const age = Math.floor(Math.random() * 20) + 20; // 20-39 –ª–µ—Ç
    const birthDate = subYears(new Date(), age);
    const telegramId = BigInt(1000000000 + i);

    try {
      const user = await prisma.user.upsert({
        where: { telegramId },
        update: {},
        create: {
          telegramId,
          username: `${name.toLowerCase()}_${1000 + i}`,
          status: UserStatus.VERIFIED
        }
      });

      const profile = await prisma.profile.upsert({
        where: { userId: user.id },
        update: { name, birthDate, city, about, photoUrl: `https://i.pravatar.cc/150?img=${i + 1}` },
        create: { name, birthDate, city, about, photoUrl: `https://i.pravatar.cc/150?img=${i + 1}`, userId: user.id }
      });

      await prisma.profileInterest.deleteMany({ where: { profileId: profile.id } });

      const numInterests = Math.floor(Math.random() * 3) + 2;
      const shuffled = [...allInterests].sort(() => 0.5 - Math.random());
      const selectedInterests = shuffled.slice(0, numInterests);

      await prisma.profileInterest.createMany({
        data: selectedInterests.map(interest => ({
          profileId: profile.id,
          interestId: interest.id,
        })),
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: ${name}, ${age} –ª–µ—Ç, ${city}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è ${i + 1}:`, error);
    }
  }
  console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// --- –ó–ê–ü–£–°–ö ---

main()
  .catch((e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });